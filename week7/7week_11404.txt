1.  n개의 도시와 그 사이를 연결하는 m개의 버스가 주어질 때, 모든 도시 쌍 (A, B)에 대하여 도시 A에서 도시 B로 가는데 필요한 최소 비용을 구하는 문제이다.
2. 모든 정점에서 모든 정점까지의 최단 거리를 구하는 문제이다. 대표적으로 x = min ( y + z , x ) 느낌이다
모든 도시 쌍 사이의 최단 경로를 찾는 알고리즘인 플로이드 워셜 알고리즘으로 풀 수 있다.

3.
1) 전역변수 INF(비교할때씀) =(Integer.MAX_VALUE-1) / 2 을 만든다 ,  N과 M 을 입력받는다 
2) 이차원 배열인 arr을 만든다
3) for문을 돌리며 arr배열값을 INF으로 초기화 시키고  i와 j 가 같을때는 a[i][j] = 0 으로 초기화 한다(자기자신가는거 0)
4) 값을 입력 받으며 arr[a][b] = Math.min(arr[a][b],c) 를 하여 arr 배열에 값을 넣는다 ( arr [a] [b] 의 값은 a->b 갈때 최소가중치 )
5) 플로이드 워셜 알고리즘을 사용하여 값을 갱신한다
6) for문을 이용하여 출력한다


올바른 입력 체크를 위한 초기값으로 INF를 설정합니다. 이 값은 Integer.MAX_VALUE / 2 보다 작게 정합니다.
정점의 개수(N)와 간선의 개수(M) 값을 파싱하여 변수에 할당합니다.
그래프를 인접 행렬(arr)로 표현합니다.
모든 정점에 대해 초기 값을 INF로 설정합니다. 대각선 요소(같은 정점으로의 경로)는 0으로 초기화합니다.
간선 정보를 입력받아 인접 행렬의 해당 위치의 값을 갱신합니다. 여기서 최소값(min)을 사용하여 여러 간선 중 가장 작은 값을 선택합니다.
플로이드 와샬 알고리즘을 실행합니다. 알고리즘의 내부 3중 for문 사용하여 모든 정점 간의 최단 경로를 구합니다. 만약 특정 정점 간의 경로(arr[i][j])가 다른 정점 k를 거쳐가는 경로보다 길면, arr[i][j] 값을 더 적은 거리로 갱신합니다.
최종 인접 행렬(arr)을 출력합니다. 경로가 없는 경우, 값이 INF인 정점 간 거리를 0으로 설정하고 출력합니다.
각 행을 줄 바꿈하여 출력합니다.
최종적으로 출력된 인접 행렬에는 모든 정점 간의 최단 경로의 거리가 표시됩니다. 플로이드 와샬 알고리즘은 모든 정점 간의 최단 경로를 찾기에 효율적이며, 그래프 내에 음의 가중치가 있는 경우에도 유용하게 사용할 수 있는 알고리즘입니다.


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer; public class Main {
static final int INF = (Integer.MAX_VALUE-1) / 2;
public static void main(String[] args) throws NumberFormatException, IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st;

    int N = Integer.parseInt(br.readLine());
    int M = Integer.parseInt(br.readLine());
    int[][] arr = new int[N + 1][N + 1];

   
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            arr[i][j] = INF;

            if (i == j) {
                arr[i][j] = 0;
            }
        }
    }

    for (int i = 0; i < M; i++) {
        st = new StringTokenizer(br.readLine());
        int a = Integer.parseInt(st.nextToken());
        int b = Integer.parseInt(st.nextToken());
        int c = Integer.parseInt(st.nextToken());
        

        arr[a][b] = Math.min(arr[a][b], c); 
    }

    for (int k = 1; k <= N; k++) {
        for (int i = 1; i <= N; i++) {
            for (int j = 1; j <= N; j++) {

                if (arr[i][j] > arr[i][k] + arr[k][j]) {
                    arr[i][j] = arr[i][k] + arr[k][j];
                }
            }
        }
    }

    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {

            if (arr[i][j] == INF) {
                arr[i][j] = 0;
            }
            System.out.print(arr[i][j] + " ");
        }
        System.out.println();
    }

}
} 