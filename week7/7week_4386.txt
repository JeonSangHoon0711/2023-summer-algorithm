1. 점들의 좌표가 주어지면 이 점들을 이어서 별자리를 만드는 최소비용을 구하는 문제이다
2. 그래프의 최소신장트리의 가중치를 찾는 문제이다. 이 문제는 크루스칼,프림으로 해결할수있다 

3.
1) Star(점) , Edge(간선) 클래스를 만들어준다.
2) n값을 입력받는다 ArrayList<Star> stars 변수를 만든다, boolean 배열 visited 를 n크기만큼 생성해준다
3) for문을 돌리며 값을 입력 받으며 stars에 Star(x,y) 를 추가한다
4) 우선순위큐를 que 를 만들어 첫번째별(인덱스0)을 가진 Edge 객체를 추가하여 알고리즘 시작
5) 프림알고리즘을 돌리며 
6) 우선순위 큐에서 가장 작은 비용의 간선을 선택하고 제거한다.
7) 선택한 간선이 연결하는 별의 인덱스를 current 변수에 저장한다.
8) 선택한 간선이 연결하는 별이 아직 방문되지 않았을 경우 이후의 로직을 수행한다
9) 방문되지 않은 별을 선택했으므로, 해당 별을 방문 처리한다.
10) 방문한 별에 연결된 간선의 비용을 총 비용(result)에 더한다.
11) 이제 현재 별에서 나머지 연결되지 않은 별들의 간선을 계산하고 큐에 추가한다.
12) result 출력한다



4.
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.PriorityQueue;

class Main {
    static class Star {
        double x, y;

        public Star(double x, double y) {
            this.x = x;
            this.y = y;
        }
    }

    static class Edge {
        int to;
        double cost;

        public Edge(int to, double cost) {
            this.to = to;
            this.cost = cost;
        }
    }

    static double dist(Star a, Star b) {
        return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int n = Integer.parseInt(br.readLine());
        ArrayList<Star> stars = new ArrayList<>();
        boolean[] visited = new boolean[n];

        for (int i = 0; i < n; i++) {
            String[] input = br.readLine().split(" ");
            double x = Double.parseDouble(input[0]);
            double y = Double.parseDouble(input[1]);
            stars.add(new Star(x, y));
        }

        PriorityQueue<Edge> queue = new PriorityQueue<>(new Comparator<Edge>() {
            @Override
            public int compare(Edge o1, Edge o2) {
                return Double.compare(o1.cost, o2.cost);
            }
        });
        queue.offer(new Edge(0, 0));
        double result = 0;

        while (!queue.isEmpty()) {
            Edge node = queue.poll();
            int current = node.to;

            if (!visited[current]) {
                visited[current] = true;
                result += node.cost;

                for (int i = 0; i < n; i++) {
                    if (!visited[i]) {
                        queue.offer(new Edge(i, dist(stars.get(current), stars.get(i))));
                    }
                }
            }
        }

        System.out.println(result);
    }
}
