1. 섬이 있고 그 섬들 사이에 가중치가 있을 때 한 섬부터 목표섬까지 옮길수있는 물품들의 중량의 최대값을 구하는 문제다
2. 한노드부터 목표 노드까지의 경로가 있는지부터 검사 해야하기때문에 bfs를 사용한다
가중치의 범위가 1 ~ 1,000,000,000 이므로 빠르게 찾기위해 이분탐색도 사용하여 중량의 최대값을 구한다.

3.
1) Node 클래스를 만든다 to,weight 변수를 만든다
2) N( 섬의 수 )과 M( 다리의 수 ) 을 입력받는다
3) 이차원연결리스트 graph를 만들어 N개의 ArrayList<> 값을 추가해준다
4) for문을 이용하여 graph에 값을 넣는다. max 변수를 사용하여 최대가중치값을 저장해둔다.
5) start,end에 시작 노드와 끝 노드를 받아준다
6) low = 1 , high = max 로 하여 가중치 범위를 설정해준다.
7) while문을 돌리면서 이진탐색과 bfs를 같이 실행해준다
8) bfs의 return 값이 true면 mid의가중치로 시작노드부터 끝노드까지 갈 수 있다 라는 뜻이다
9) true 라면 low 값을 mid+1로 수정하여 다시 탐색한다
10) false 라면 high 값을 mid -1 로 수정하여 다시 탐색한다
11) while이 끝난 후 result 를 출력 한다


import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class Node {
    int to, weight;

    Node(int to, int weight) {
        this.to = to;
        this.weight = weight;
    }
}

public class Main {

    private static boolean bfs(ArrayList<ArrayList<Node>> graph, int N, int start, int end, int mid) {
        Queue<Integer> queue = new LinkedList<>();
        boolean[] visited = new boolean[N + 1];

        queue.offer(start);
        visited[start] = true;

        while (!queue.isEmpty()) {
            int cur = queue.poll();
            if (cur == end) return true;

            ArrayList<Node> nodeList = graph.get(cur);
            for (Node node : nodeList) {
                if (!visited[node.to] && node.weight >= mid) {
                    visited[node.to] = true;
                    queue.offer(node.to);
                }
            }
        }

        return false;
    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        ArrayList<ArrayList<Node>> graph = new ArrayList<>(N + 1);

        for (int i = 0; i <= N; i++) {
            graph.add(new ArrayList<>());
        }

        int max = 0;
        for (int i = 0; i < M; i++) {
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            int c = Integer.parseInt(st.nextToken());

            graph.get(a).add(new Node(b, c));
            graph.get(b).add(new Node(a, c));
            max = Math.max(max, c);
        }

        st = new StringTokenizer(br.readLine());
        int start = Integer.parseInt(st.nextToken());
        int end = Integer.parseInt(st.nextToken());

        int result = 0;
        int low = 1, high = max;

        while (low <= high) {
            int mid = (low + high) / 2;

            if (bfs(graph, N, start, end, mid)) {
                result = mid;
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        System.out.println(result);
    }
}
