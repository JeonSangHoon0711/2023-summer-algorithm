1. n번째 피보나치수를 구하는 문제이다
2. n의 범위가 1,000,000,000,000,000,000보다 작거나 같은 자연수이며 제한시간이 1초이기에 
원래 알고있던  f(n) = f(n-1) + f(n-2) 이 식이 아닌 더 빠른 행렬 거듭제곱으로 구해야 한다
f(n+1) f(n) = 1 1 ^n
f(n)    f(n-1)  1 0
을 이용하여 반씩 쪼개가면서 더 빠르게 구할 수 있다
2^n = 2^n/2 * 2^n/2 ( n % 2 = 0 )
2^n = 2^n/2 * 2^n/2 * 1 1  ( n % 2 = 1 )
		      0  0

3.
1) 문제에서 MOD 연산 1000000007 을 하기위해 private static final long MOD = 1000000007l 를    선언해 준다.
2) main에서 n을 입력받는다
3) 행렬곱 연산을 하는 함수 matrixMult를 만든다
   이차원행렬 2개 가 파라메터 이고 이 두개로 행렬 곱 연산을 한다
3) fibo 함수를 만든다 fibo는 재귀함수이다
   n == 1 일때 초기값인 {{1,1},{1,0}} 을 리턴한다
   n != 1 일때 행렬곱 연산을 해준다 이때 n이 홀수인지 짝수인지 구분하여 위 식을 따로 적용한다
홀수일때 matrixMult(matrixMult(tmp, tmp), fibo(1)) 을 리턴하고
짝수일때 matrixMult(tmp, tmp) 을 리턴한다
4) 출력한다


import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Main {
    private static final long MOD = 1000000007l;

    public static long[][] matrixMult(long[][] a, long[][] b) {
        long[][] arr = new long[2][2];
        arr[0][0] = (a[0][0]*b[0][0] + a[0][1]*b[1][0])%MOD;
        arr[1][0] = (a[0][0]*b[0][1] + a[0][1]*b[1][1])%MOD;
        arr[0][1] = (a[1][0]*b[0][0] + a[1][1]*b[1][0])%MOD;
        arr[1][1] = (a[1][0]*b[0][1] + a[1][1]*b[1][1])%MOD;
        return arr;
    }

    public static long[][] fibo(long n) {
        if (n == 1) {
            long[][] arr = {{1,1},{1,0}};
            return arr;
        }
        long[][] tmp = fibo(n/2);
        if (n%2==1) {
            return matrixMult(matrixMult(tmp, tmp), fibo(1));
        } else {
            return matrixMult(tmp, tmp);
        }
    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        long n = Long.parseLong(br.readLine());
        System.out.println(fibo(n)[0][1]);
    }
}