1. 수열 A가 있을때 가장 긴 증가하는 부분 수열을 구하는 프로그램이다.
2.
dp[i] = k -> i번째 수열까지의 최대 증가수열의 길이 = k 라는 dp 배열을 만든다
이중 포문을 이용하여 현재구하는 곳 i , 비교대상 j 라고 생각하고
i 이전의 모든 j 에 대해 비교해준다
arr[i] > arr[j] 이고 dp[i]<dp[j] +1 일때 dp 를 dp[j]+1 로 갱신해준다
dp 배열이 완성되면 가장 큰 값을 가진 인덱스를 찾아 
ex) 가장 큰 값이 4고 그 인덱스가 5일경우
arr[5]를 출력하고
그후 큰값이 3이니 dp[i] = 3 인곳을찾고 
arr[i] 를 출력해준다.
이런식으로 역순으로 찾아가며 스택에 넣고 
출력하면 된다.

3.
1) N을 입력받는다
2) arr,dp 배열을 생성한다 크기는 N+1 이다 ( 1일차~N일차 까지 계산하기 때문 )
3) StringTokenizer st 로 한줄 입력받는다
4) for문 생성 ( 1~N ) 
5) arr[i] = st.nextToken 을하여 입력받는다
6) for문안에 for문생성 j = 0 ~ j < i 까지
7) arr[i] > arr[j] 일때
8) dp[i] = Math.max(dp[j] + 1, dp[i]) 점화식을 돌려주며 dp 를 최신화 시킨다
9) result 값도 최대값으로 최신화 시켜 준다
10) value에 result 값을 저장해두고
11) for문 i=N ~ i>=1 i-- 생성
12) value == dp[i] 일때 ( 최대값을 가지는 dp 배열의 인덱스 i 를 찾기위함 )
13) stack.push(arr[i]); 를 해주고 value -- 를 해준다.
14) result 를 출력한다
15) while 문을 통해 스택을 pop 하며 출력한다.

4.
import java.io.*;
import java.util.Stack;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		int N = Integer.parseInt(br.readLine());
		int arr[] = new int[N + 1];
		int dp[] = new int[N + 1];
		int result = 0;

		StringTokenizer st = new StringTokenizer(br.readLine());

		for (int i = 1; i <= N; i++) {
			arr[i] = Integer.parseInt(st.nextToken());;
			for (int j = 0; j < i; j++) {
				if (arr[i] > arr[j]) {
					dp[i] = Math.max(dp[j] + 1, dp[i]);
					result = Math.max(dp[i], result);
				}
			}
		}

		int value = result;

		Stack<Integer> stack = new Stack<>();

		for (int i = N; i >= 1; i--) {

			if (value == dp[i]) {

				stack.push(arr[i]);
				value--;
			}
		}
		System.out.println(result);
		while (!stack.isEmpty()) {
			System.out.print(stack.pop() + " ");
		}
		br.close();
	}
}