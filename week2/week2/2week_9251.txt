1. 두 수열이 주어졌을때, 모두의 부분 수열이 되는 수열 중 가장 긴 것을 찾는 문제다.
ex) ACAYKP , CAPCAK의 LCS 는 ACAK 다
2.
ACAYKP 행
CAPCAK 열 
로 지정한다
A하나와 중복되는 최대 길이를 나타내면 열쪽에 
0
1
1
1
1
1
1

이렇게 나올거다
AC를 와 중복되는 최대 길이는
0	1
1	1
1	1
1	2
1	2
1	2

ACA와 중복은
0	1	1
1	1	2
1	1	2
1	2	2
1	2	3
1	2	3
해서 쭉쭉 가보면
    A	C	A	Y	K	P
C  0	1	1	1	1	1
A  1	1	2	2	2	2
P  1	1	2	2	2	3
C  1	2	2	2	2	3
A  1	2	3	3	3	3
K  1	2	3	3	4	4

이렇게 나온다
첫 행을보면 C가 C를 만날때 이전값의+1이된다
두번째 행을 보면 A가 A를 만날때 +1이 된다
공통된 문자가 있으면 변화가 있다.
공통된 문자를 만날 경우 +1을하고
그렇지 않을경우 열-1 과 행-1값중 큰값을 가져온다

그렇다면 점화식은
공통된 문자를 만날경우 dp[i][j] = dp[i - 1][j - 1] + 1
그렇지 않을 경우 dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
가 된다.

3.)
1) str1,str2 배열에 각각의 문자를 입력받는다
2) str1과str2의 길이를 저장한다
3) dp 배열을 만든다 크기는 [str1의길이+1][str2의길이+1]  공집합표현을 위해 +1 해준다
4) for문 i=1~ i<=str1의길이 생성
5) 이중for문 j=1~j<=str2의길이 생성
6) if문을 통해 두 문자가 같은지 확인 if (str1[i - 1] == str2[j - 1])
7) 같다면 이전값 +1 한것으로 dp 최신화 dp[i][j] = dp[i - 1][j - 1] + 1
8) 다르다면 dp[i - 1][j], dp[i][j - 1] 두개중 큰값으로 최신화  dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1])
9)dp[str1의길이][str2의길이] 출력

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Main {

	public static void main(String[] args) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		char[] str1 = br.readLine().toCharArray();
		char[] str2 = br.readLine().toCharArray();

		int length_1 = str1.length;
		int length_2 = str2.length;

		int[][] dp = new int[length_1 + 1][length_2 + 1];

		for (int i = 1; i <= length_1; i++) {
			for (int j = 1; j <= length_2; j++) {

				if (str1[i - 1] == str2[j - 1]) {
					dp[i][j] = dp[i - 1][j - 1] + 1;
				}

				else {
					dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
				}
			}
		}
		System.out.println(dp[length_1][length_2]);

	}

}