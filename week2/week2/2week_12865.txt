1.
이 문제는 knapsack로 유명한 문제이다 배낭에 넣을 수 있는 최대 값이 정해지고 해당 한도 물건을 넣어 가치의 합이 최대가 되도록 구한다

2. 
이 문제는 배낭에 넣을 수 있는 물건을 쪼갤 수 없다.
N과 W가 주어집니다. (물론, NW는 다항 시간 이어야 할 것입니다.
각 물건의 비용c_i와 가치v_i를 받은 다음, 물건리스트에 기록해 둡니다.
DP를 행할 배열을 ‘2’차원으로 생성합니다.
 행의 수는 N, 열의 수는 W로 정하고
DP[i][j]의 값은 1번 부터 i번 째 물건까지 주어 지고
 j가 최대 허용 비용일 때의 (최대 가치 합) V를 기록합니다
그렇다면, DP[i][j]값의 후보는 
(I). DP[i-1][j] 이거나, (II). DP[i-1][j - c[i]] + v[i] 두 가지 중 최대 인 값이 됩니다.
(I)의 의미는 i번 째 물건을 포함 하지 않고, j 이하로 하는 조합은 DP[i][j]조건에도 들 수 있을 것 입니다.(즉, DP[i-1][j] 는 i번 째 물건을 반드시 포함하지 않으면서, DP[i][j]조건에는 충족된다는 것을 알 수 있습니다.)
(II)의 의미는 (I)와 반대로 i번 째 물건을 반드시 포함 하고, j 이하로 하는 조합은 DP[i][j]조건에도 들 수 있을 것 입니다.그런데, i번 째 물건을 추가한다면, 1부터 i-1번째 물건 중 j - c[i] 이하로 하는 조합에서 i번 째 물건의 가치를 더해야 하므로,식은 결과적으로 위와 같이 나오게 되는 것입니다. (즉, DP[i-1][j - c[i]]에 v[i]를 더한 값은 조건에 충족 될 것 입니다.)


3.
1) 물건갯수 N 과 배낭용량 k 를 입력받는다
2) dp 이차원 배열을 생성한다 크기는 N+1,N+1 이다 0은 값이없기 때문
3) for문 생성 i=1~i<=N 까지 돌린다
4) 이중for문 생성 ( j =1 ~ j<k )
5) if(j<c[i]) 일때 ( j = 지금 넣을 무게 c[i] 는 i 번째 물건의 무게 이말은 지금c[i]번째 물건의 무게가 현재 넣을려는 무게 용량보다 클때 ) 
6) 이때는 넣을 수 없으니 이전값으로 dp를 최신화 시킨다 dp[i][j] = dp[i - 1][j]
7) 그렇지 않을때는 dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - c[i]] + v[i]); 이점화식을 실행한다
8) dp[N][k] 를 출력하여 최대값을 출력한다


import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int k = Integer.parseInt(st.nextToken());

        int[] c = new int[N + 1];
        int[] v = new int[N + 1];

        for (int i = 1; i < N + 1; i++) {
            st = new StringTokenizer(br.readLine());
            c[i] = Integer.parseInt(st.nextToken());
            v[i] = Integer.parseInt(st.nextToken());
        }

        int[][] dp = new int[N + 1][k + 1];

        for (int i = 1; i <= N ; i++) {
            for (int j = 1; j < k + 1; j++) {
                if (j < c[i]) {
									dp[i][j] = dp[i - 1][j];
									continue;	
								}
								dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - c[i]] + v[i]);
            }
        }

        System.out.println(dp[N][k]);
				br.close();
    }
}