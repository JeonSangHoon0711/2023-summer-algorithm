1. 상담을 적절히 했을 때, 백준이가 얻을 수 있는 최대 수익을 구하는 문제이다.
2.
dp[] ( n 일차에 얻을 수 있는 최대 수익 )
p[i] ( i 일차에 상담을 했을때 걸리는 시간 )
t[i] ( i 일차에 상담을 했을때 받는 금액 )
dp[] 의 초기값은 0이고
dp[i + t[i]] = Math.max(dp[i + t[i]], dp[i] + p[i]);
이 점화식을 이용하여 dp를 최신화 한다
dp[i+t[i]] --> i + t[i] 일차에 받을 수 있는 최대 금액
dp[i + t[i]] --> i + t[i] 일차에 받을 수 있는 최대 금액
dp[i] + p[i] --> i일차에 상담을 했을때 원래있던 금액 + 현재금액 한값
두개를 비교하여 dp[i + t[i]] 값을 최신화 시킨다
위의 식은 i + t[i] <=n 일때 실행되어야 한다. 날짜를 넘어가면안되기때문이다
넘어간다면 이전까지 일한 최대 수당을 넣어줘야한다.
dp[i+1] = Math.max(dp[i+1], dp[i]); 
여기서 N=7 일때  i=6 일때 위 식이 실행되면서 7일차에 받을수있는 최대 금액이 dp 배열에 들어간다
7
3 10
5 20
1 10
1 20
2 15
4 40
2 200
의 경우
dp = { 0, 0, 0, 10, 30, 30, 45, 45 }
의 결과가 나오게 된다

3.
1) 날짜 N 을 입력받는다
2) t,p 배열에 값을 입력 받는다 각각 i일차에 상담시 걸리는 시간, 받는 금액 이다.
3) dp 배열을 N+1 크기로 만든다
4) N번 돌아가는 for문을 만든다
5) i + t[i] <= n (날짜를안넘어갈때) 점화식을 계산해준다 dp[i + t[i]] = Math.max(dp[i + t[i]], dp[i] + p[i]);
6) i + t[i] > n (날짜를 넘어갈때) 점화식을 계산해준다 dp[i+1] = Math.max(dp[i+1], dp[i]);
7) dp[n] 을 출력해준다



4.
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int n = Integer.parseInt(br.readLine());
		
		int[] t = new int[n];
		int[] p = new int[n];
		
		StringTokenizer st;
		for (int i=0; i<n; i++) {
			st = new StringTokenizer(br.readLine());
			
			t[i] = Integer.parseInt(st.nextToken());
			p[i] = Integer.parseInt(st.nextToken());
		}
		br.close();

		//dp : N일에 얻을 수 있는 최대 수익
		int[] dp = new int[n+1];
		
		
		for (int i=0; i<n; i++) {
			if (i + t[i] <= n) {

				dp[i + t[i]] = Math.max(dp[i + t[i]], dp[i] + p[i]);

			}
			dp[i+1] = Math.max(dp[i+1], dp[i]);
		}
		System.out.println(dp[n]);
		
	}
}



