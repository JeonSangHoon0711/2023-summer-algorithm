1. 1번컴퓨터와 연결되어있는 것의 수를 출력하는 문제이다
2. dfs 탐색을통해 1번과 연결 되어있는지 확인후 연결되어있다면 conut를 증가시킨다

3.
1) N과M의 값을 입력받는다 visited 배열을 초기화 시킨다
2) for문을통해 값을 입력 받는다
3) dfs를 실행한다
4) dfs에서 vistated배열의값을 true 로 바꿔주고 count 를 1증가시킨다
5) graph의 사이즈를 가져오고 그만큼 for문을 돌리며 포문 내에서 dfs 탐색을 한다 여기서 이미 방문한 노드라면 contunue 한다
6) count 를 출력하는데 1번노드 제외해야하기떄문에 -1 후에 출력한다



import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Main {
	static int N,M,count;
    static ArrayList<ArrayList<Integer>> graph;
    static boolean[] visited;

    static void dfs(int start){
        visited[start] = true;
        count += 1;
        int size = graph.get(start).size();

        for(int i=0; i<size; i++){
            int vertex = graph.get(start).get(i);
            if(visited[vertex])
                continue;
            dfs(vertex);
        }
    }

    public static void main(String args[]) throws IOException {
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        N = Integer.parseInt(bf.readLine());
        M = Integer.parseInt(bf.readLine());
        graph = new ArrayList<ArrayList<Integer>>();
        visited = new boolean[N+1];

        for(int i=0; i<N+1; i++)
            graph.add(new ArrayList<Integer>());

        for(int i=0; i<M; i++){
            st = new StringTokenizer(bf.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());

            graph.get(a).add(b);
            graph.get(b).add(a);
        }

        dfs(1);
        System.out.println(count-1);
    }
}