1. 토마토 상자에서 언제 다 토마토기 익는지 찾는 문제다
2. bfs 탐색을 이용하며 큐에 익은 토마토들을 저장해두고 큐를 poll 하면서 
상하좌우 체크하면서 0일경우 1로만들어 준다 이과정을 큐가 빌때까지 반복한다
마지막에 모두 검사후 출력한다.

3.
1) dx,dy 배열로 상하좌우 뽑아낼때 쓸 배열을 만든다
2) m과n에 값을 입력받는다
3) map 배열을 [n][m] 크기로 초기화후에 값을 입력 받는다
4) [i][j] == 1 이면 큐에 데이터 추가한다
5) bfs 를 실행한다
6) while문 큐에 값이 남아 있으면 실행한다
7) 임시데이터 t 를 큐에서 poll 하며 가져온다 
8) x,y 에 t의 x,y 값을 넣는다
9) for문으로 상하좌우를 검사해준다 여기서 if문을 통해 인덱스 벗어나는걸 막아준다
10) 상하좌우 검사할때 0일때 + 1 해준다
11) checkZero 를 통해 bfs 후에 0 이 있는지 검사한다 있다면 false를 리턴한다 없다면 true 리턴
12) for문 돌린후 최대값을 찾고 그것을 리턴하면 며칠걸리는지 나온다.


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;


public class Main {
    static int[] dx = {-1, 1, 0, 0};  //상하좌우
    static int[] dy = {0, 0, -1, 1};  //상하좌우
    static int n, m;
    static int[][] map;
    static Queue<int[]> que = new LinkedList<>();

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        m = Integer.parseInt(st.nextToken());
        n = Integer.parseInt(st.nextToken());

        map = new int[n][m];


        for (int i = 0; i < n; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < m; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
                if (map[i][j] == 1) {
                    que.add(new int[]{i, j});
                }
            }
        }

        System.out.println(bfs());
    }

    private static int bfs() {
        while (!que.isEmpty()) {
            int[] t = que.poll();
            int x = t[0];
            int y = t[1];
            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
                if (map[nx][ny] == 0) {
                    map[nx][ny] = map[x][y] + 1;
                    que.add(new int[]{nx, ny});
                }
            }
        }

        int max = Integer.MIN_VALUE;
        if (checkZero()) {
            return -1;
        } else {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    if (max < map[i][j]) {
                        max = map[i][j];
                    }
                }
            }

            return max - 1;
        }


    }

    private static boolean checkZero() {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (map[i][j] == 0)
                    return true;
            }
        }
        return false;
    }
}