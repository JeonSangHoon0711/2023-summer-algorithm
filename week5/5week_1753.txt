1. 방향그래프가 주어졌을때 모든정점으로의 최단 경로를 구하는 문제이다
2. 첫째 줄부터 V개의 줄에 걸쳐, i번째 줄에 i번 정점으로의 최단 경로의 경로값을 출력한다. 시작점 자신은 0으로 출력하고, 경로가 존재하지 않는 경우에는 INF를 출력하면 된다.
간선에 가중치가있고 그래프에서 한정점에서 다른정점으로 가는 최단 경로를 찾는 알고리즘인 다익스트라를 이용한다

3.
1) Edge 클래스를 생성한다 int형 변수인 i와 v 가 존재한다.
2) 전역번수로 연결리스트<Edge>와 거리정보를담는배열 dist 를생성한다
3) 첫줄 입력을 in 배열에 받고 dot에는 정점의개수를 line에는 간선의 개수를 담는다
4) start 변수에 시작정점을 담는다
5) list의 크기를 dot+1로 설정한다
6) for문을 돌리며 연결리스트 배열에 연결리스트를 모두 채워준다
7) for문을 돌리며 연결리스트 배열에 list[시작정점].add(new Edge(도착정점,가중치)) 를 해준다
8) dist 배열 크기를 dot+1로 설정하고 최소값을 구해야하니 최대값인 Integer.Max_vALUE로 채워둔다
9) 다익스트라 메소드를 돌린다
10) 다익스트레 메소드는 우선순위큐를 이용한다 우선순위큐 pq를 생성
11) pq.add(new Edge(s)) 를 하여 탐색 시작점을 정한다
12) while문을 돌리며 pq가 isEmpty 가 아닐때까지 돌린다
13) pq.poll()로 현재 최소 거리 정점을 가져온다(now 변수에 할당)
14) 현재 정점에 연결된 모든 인접한 정점들을 순회하며 (next 변수로 참조), 현재 정점까지의 거리(now.v)와 현재 정점에서 인접 정점까지의 거리(next.v)의 합이 기존의 인접 정점까지의 거리보다 짧은지 확인한다
15) 거리가 더 짧으면 dist 배열을 갱신하고, 갱신된 거리와 인접 정점 정보를 가진 새로운 Edge 객체를 큐에 다시 추가합니다.
16) for문을 사용해 dist[i] 가 Integer.MAX_VALUE 일떄랑 아닐때 해서 출력한다


4.import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.stream.Stream;


class Edge implements Comparable<Edge>{
	int i, v;
	public Edge(int i, int v) {
		this.i = i;
		this.v = v;
	}
	@Override
	public int compareTo(Edge o) {
		return this.v - o.v;
	}	
}
public class Main{
	static ArrayList<Edge> list[];
	static int dist[]; 
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int[] in = Stream.of(br.readLine().split(" ")).mapToInt(Integer::parseInt).toArray(); 
		int dot = in[0];
        int line= in[1];
		int start = Integer.parseInt(br.readLine());
		
		
		list = new ArrayList[dot+1]; 
		for(int i=1;i<list.length;i++) 
			list[i] = new ArrayList<Edge>();
		for(int i=0;i<line;i++) {            
			String [] tt = br.readLine().split(" ");
	        int a = Integer.parseInt(tt[0]);   
	        int b = Integer.parseInt(tt[1]);  
	        int w = Integer.parseInt(tt[2]);   
	        list[a].add(new Edge(b,w));		
		}
			
		
		dist = new int[dot+1];
		Arrays.fill(dist, Integer.MAX_VALUE); 
		dist[start] = 0; 
		
		dijkstra(start);
		
		for(int i=1;i<dist.length;i++) {
			if(dist[i]== Integer.MAX_VALUE)
				System.out.println("INF");
			else
				System.out.println(dist[i]);
		}
	}
	private static void dijkstra(int s) {
		PriorityQueue<Edge> pq = new PriorityQueue<Edge>();
		pq.add(new Edge(s,0)); 
		while(!pq.isEmpty()) {
			Edge now = pq.poll();
			for(Edge next : list[now.i]) {
				if(dist[next.i] > now.v + next.v) {
					dist[next.i] = now.v + next.v;
					pq.add(new Edge(next.i, dist[next.i]));
				}
			}			
		}
	}
}