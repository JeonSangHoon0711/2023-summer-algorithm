1. 도화지에 그려진 선들의 길이 합 겹쳐지는곳은 중복 계산 x 
2. x축기준으로 정렬시킨후 시작위치가 이전 마지막 위치보다 크면 연결되지않은선
시작위치가 마지막 위치보다 작거나 같으면 연결된선

3.
1) Info 클래스 생성 int 형 변수인 x,y 보유 하며 시작위치가 같을때 y위치 내림차순 시작위치 다를떄 시작위치 오름차순 한다
2) N에 선을 그은 횟수를 입력ㅂ다는다
3) 우선순위큐 pq를 생성한다 입력되는 선의 정보를 저장한다
4) for문을 만들며 pq에 값을 넣는다
5) 제일처음시작하는 선 변수 first_line을 만들고 pq.poll 한다
6) start와 end에 처음선의 x,y를 담는다.
7) pq가 empty가 아닐때까지 while문을 돌린다
8) cur은 다음선의 정보이며 cur.x가 end보다 크다는것은 연결되지 않는다는 뜻이므로 선의 길이를 result에 저장하고 start와 end를 수정해준다
9) cur.y>end 일때 end를 cur.y로 변경한다
10) 마지막선의 길이를 더해주고 출력한다

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
    static class Info implements Comparable<Info>{
        int x, y;
        public Info(int x, int y){
            this.x = x;
            this.y = y;
        }

        @Override
        public int compareTo( Info o) {
            if(this.x == o.x)
                return o.y - this.y;
            return this.x - o.x;
        }
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        StringTokenizer st;
        PriorityQueue<Info> pq = new PriorityQueue<>();
        for(int i=0;i<N;i++) {
            st = new StringTokenizer(br.readLine(), " ");
            pq.offer(new Info(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken())));
        }
        Info first_line = pq.poll();
        int start = first_line.x;
        int end = first_line.y;
        int result = 0;
        while(!pq.isEmpty()){
            Info cur = pq.poll();
            if(cur.x > end){
                result += end - start;
                start = cur.x;	
                end = cur.y;
                continue;
            }
            if(cur.y > end)
                end = cur.y;
        }
        result += end - start;
        System.out.println(result);
        br.close();
    }
}
